// SET ROLE CONTEXT
use role accountadmin;

// SET WAREHOUSE CONTEXT
use warehouse sample_wh;

// SET SCHEMA CONTEXT
use schema sample_db.public;

// CREATE REGION SPECIFIC MASKED ROLES
create or replace role america_role_masked;
create or replace role europe_role_masked;

// CREATE MASKING POLICY FOR STRINGS
create or replace masking policy mask_string as
(val string) returns string ->
    case when endswith(current_role(),'_MASKED') then '****MASKED****'
    else val end;

// APPLY MASKING POLICY
alter table sample_table modify
    column name set masking policy mask_string
    ,column address set masking policy mask_string
    ,column phone set masking policy mask_string;

// GRANT REGION ROLES WAREHOUSE PRIVILEGES
grant usage on warehouse sample_wh to role america_role_masked;
grant usage on warehouse sample_wh to role europe_role_masked;

// GRANT REGION ROLES DATABASE PRIVILEGES
grant usage on database sample_db to role america_role_masked;
grant usage on database sample_db to role europe_role_masked;

// GRANT REGION ROLES SCHEMA PRIVILEGES
grant usage on schema public to role america_role_masked;
grant usage on schema public to role europe_role_masked;

// GRANT REGION ROLES TABLE PRIVILEGES
grant select on table sample_table to role america_role_masked;
grant select on table sample_table to role europe_role_masked;

// GRANT MASKED ROLES TO PARENT ROLES
grant role america_role_masked to role america_role;
grant role europe_role_masked to role europe_role;

// TEST ROLES
use role america_role_masked;
select region
    ,market
    ,count(distinct id) count_customer
    ,sum(balance) sum_balance
    ,round((sum_balance/count_customer),2) avg_customer_balance
from sample_table
group by 1,2;

use role europe_role_masked;
select region
    ,market
    ,count(distinct id) count_customer
    ,sum(balance) sum_balance
    ,round((sum_balance/count_customer),2) avg_customer_balance
from sample_table
group by 1,2;
