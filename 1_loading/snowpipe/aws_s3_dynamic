// SET ROLE CONTEXT
use role accountadmin;
create warehouse if not exists snowpipe_wh
with warehouse_size = xsmall
    max_cluster_count = 1
    min_cluster_count = 1
    auto_suspend = 60;
use warehouse snowpipe_wh;
create database if not exists reset_db;
create schema if not exists reset_db.snowpipe;
use schema reset_db.snowpipe;

// SET AWS S3 BUCKET VARIABLES
set var_customer_name = 'Customer_1';
set var_aws_role_arn = 'arn:aws:iam::001234567890:role/myrole';
set var_storage_locations = 's3://mybucket1/mypath1/';

// CREATE PROCEDURE
create or replace procedure reset_db.snowpipe.create_proc(database string, integration string, location string, aws_role_arn string)
returns string
language javascript
execute as owner
as $$
// CREATE DATABASE
    var create_database = 
        `create database if not exists `+DATABASE+``;
    result = snowflake.execute({ sqlText: create_database });
// CREATE SCHEMA
    var create_schema = 
        `create schema if not exists `+DATABASE+`.ingest`;
    result = snowflake.execute({ sqlText: create_schema });
// CREATE STORAGE INTEGRATION
    var create_integration =
        `create storage integration if not exists `+INTEGRATION+`
            type = external_stage
            storage_provider = s3
            enabled = true
            storage_aws_role_arn = '`+AWS_ROLE_ARN+`'
            storage_allowed_locations = ('`+LOCATION+`')`;
    result = snowflake.execute({ sqlText: create_integration });
// CREATE STAGE
    var create_stage = 
        `create or replace stage ingest_stage
            url = '`+LOCATION+`'
            storage_integration = `+INTEGRATION+``;
    result = snowflake.execute({ sqlText: create_stage });
// CREATE TABLE
    var create_table = 
        `create table if not exists `+DATABASE+`.ingest.raw_table(
            row_number              number
            ,file_name              string
            ,timestamp_ingested     timestamp
            ,raw_data               variant)`;
    result = snowflake.execute({ sqlText: create_table });
// RETURN
    return('Completed');
$$;

// RUN PROCEDURE
call reset_db.snowpipe.create_proc($var_customer_name||'_db',$var_customer_name||'_int',$var_storage_locations,$var_aws_role_arn);
