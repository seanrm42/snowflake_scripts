-- SET CONTEXT
use role sales_engineer;
set var_warehouse = current_user() || '_WH';
create or replace warehouse identifier( $var_warehouse ) with warehouse_size='X-SMALL';
use warehouse identifier( $var_warehouse );

-- INPUT DATABASE
set variable_database = 'fivetran';
use database identifier( $variable_database );

-- INPUT SCHEMA
set variable_schema = 'salesforce';
set variable_database_schema = $variable_database || '.' || $variable_schema;
use database identifier( $variable_database );

-- INPUT OPPORTUNITY TABLE
set variable_table_opportunity = 'opportunity';
set identifier_table_opportunity = $variable_database_schema || '.' || $variable_table_opportunity;

-- INPUT OPPORTUNITY FIELD HISTORY TABLE
set variable_table_opportunity_field_history = 'opportunity_field_history';
set identifier_table_opportunity_field_history = $variable_database_schema || '.' || $variable_table_opportunity_field_history;

-- INPUT OWNER TABLE
set variable_table_owner = 'user';
set identifier_table_owner = $variable_database_schema || '.' || $variable_table_owner;

-- INPUT OPPORTUNITY FIELD HISTORY PRICE
set variable_price = 'Forecast_ACV__c';

--INPUT OPPORTUNITY PRICE
set variable_opportunity_price = $variable_table_opportunity || '.' || 'forecast_acv_c';

-- INPUT OPPORTUNITY FIELD HISTORY CLOSE DATE
set variable_date = 'CloseDate';

-- INPUT OPPORTUNITY FIELD HISTORY PROBABILITY
set variable_probability = 'Probability';
set variable_table_opportunity_history = 'opportunity_history';
set identifier_table_opportunity_history = $variable_database_schema || '.' || $variable_table_opportunity_history;
set variable_table_opportunity_history_price = 'opportunity_history_price';
set identifier_table_opportunity_history_price = $variable_database_schema || '.' || $variable_table_opportunity_history_price;
set variable_table_opportunity_history_date = 'opportunity_history_date';
set identifier_table_opportunity_history_date = $variable_database_schema || '.' || $variable_table_opportunity_history_date;
set variable_table_opportunity_history_weight = 'opportunity_history_weight';
set identifier_table_opportunity_history_weight = $variable_database_schema || '.' || $variable_table_opportunity_history_weight;
set variable_table_opportunity_pipeline = 'opportunity_pipeline';
set identifier_table_opportunity_pipeline = $variable_database_schema || '.' || $variable_table_opportunity_pipeline;

// REFRESHES THE ENTIRE OPPORTUNITY HISTORY FIELD TABLE

create or replace temporary table identifier( $identifier_table_opportunity_history ) as

// SELECT STATEMENT USED FOR SELECTING FIELDS

select  opportunity.id              as id_opportunity
        ,history.id                 as id_history
        ,to_date( opportunity.created_date ) as date_created
        ,to_date( opportunity.close_date ) as date_closed
        ,opportunity.is_closed      as is_closed
        ,opportunity.is_won         as is_won
        ,history.is_deleted         as is_deleted
        ,opportunity.name           as name_opportunity

// CONVERST THE DEFAULT TIME ZONE OF SALESFORCE 

        ,convert_timezone('America/New_York', history.created_date ) as date_changed_raw

// TWO NEXT FIELDS SORTS THE FIELD CHANGES BY TIME WHEN LOGGED WITH DUPLICATE TIMES TO THE SECOND

        ,case when last_day( to_date( date_changed_raw ) ) > last_day( to_date( opportunity.close_date ) )
                then dateadd( day, datediff(day, date_changed_raw, last_day( to_date( opportunity.close_date ) ) ), 
                    dateadd( minute, datediff(day, last_day( to_date( opportunity.close_date ) ), date_changed_raw ), date_changed_raw ) )
            when last_day( to_date( date_changed_raw ) ) < last_day( to_date ( opportunity.created_date ) )
                then dateadd( day, datediff(day, date_changed_raw, last_day( to_date ( opportunity.created_date ) ) ), date_changed_raw )
            else date_changed_raw
            end as date_changed_clean  

        ,case when history.id = history_third.history_id_1 
                then dateadd( second, -2, date_changed_clean )
            when history.id = history_second.history_id_1 
                then dateadd( second, -1, date_changed_clean )
            else date_changed_clean 
            end as date_changed        
      
        ,history.old_value      
        ,history.new_value

        ,history.field              as name_field
        ,owner.owner_name           as name_user_changed


// FROM AND JOIN STATEMENTS USED FOR SELECTING SOURCES FOR FIELDS IN SELECT STATEMENT

// SALESFORCE OPPORTUNITY DIMENSION TABLE
        
from        identifier( $identifier_table_opportunity )
    as opportunity  
      
// SALESFORCE OPPORTUNITY FIELD HISTORY TABLE JOINED TO THE OPPORTUNITY DIMENSION TABLE

left join   identifier( $identifier_table_opportunity_field_history )
    as history
    on opportunity.id = history.opportunity_id
        
// SALESFORCE OWNER TABLE JOINED TO THE OPPORTUNITY DIMENSION TABLE

left join ( select  owner.id as owner_id
                    ,owner.name as owner_name 
            from identifier( $identifier_table_owner ) as owner ) 
as owner
on history.created_by_id = owner.owner_id
        
// NEXT FOUR LEFT JOINS CHECK DUPLICATE TIMES IN THE HISTORY LOG

left join ( select  history_1.id as history_id_1
                   ,history_1.old_value as old_value_1
                   ,history_1.new_value as new_value_1
                   ,history_2.id as history_id_2
                   ,history_2.old_value as old_value_2
                   ,history_2.new_value as new_value_2         
                   
            from    identifier( $identifier_table_opportunity_field_history ) as history_1           
            
            left join identifier( $identifier_table_opportunity_field_history )
                as history_2
                on history_1.opportunity_id = history_2.opportunity_id
                    and history_1.created_date = history_2.created_date
                    and history_1.new_value = history_2.old_value
                    and history_1.id != history_2.id
                    
            where history_2.id is not null ) 

as history_second
on history.id = history_second.history_id_1
        
left join ( select  history_1.id as history_id_1
                   ,history_1.old_value as old_value_1
                   ,history_1.new_value as new_value_1
                   ,history_2.id as history_id_2
                   ,history_2.old_value as old_value_2
                   ,history_2.new_value as new_value_2         
                   
            from    identifier( $identifier_table_opportunity_field_history ) 
                as history_1           
            
            left join identifier( $identifier_table_opportunity_field_history )
                as history_2
                on history_1.opportunity_id = history_2.opportunity_id
                    and history_1.created_date = history_2.created_date
                    and history_1.new_value = history_2.old_value
                    and history_1.old_value = history_2.new_value
                    and history_1.id != history_2.id
                    
            where history_2.id is not null ) 
        
as history_second_duplicate
on history.id = history_second_duplicate.history_id_1

left join ( select  history_1.id as history_id_1
                    ,history_1.old_value as old_value_1
                    ,history_1.new_value as new_value_1
                    ,history_2.id as history_id_2
                    ,history_2.old_value as old_value_2
                    ,history_2.new_value as new_value_2  
                    ,history_3.id as history_id_3
                    ,history_3.old_value as old_value_3
                    ,history_3.new_value as new_value_3
           
            from    identifier( $identifier_table_opportunity_field_history ) 
                as history_1
            
            left join identifier( $identifier_table_opportunity_field_history ) 
                as history_2
                on history_1.opportunity_id = history_2.opportunity_id
                    and history_1.created_date = history_2.created_date
                    and history_1.new_value = history_2.old_value
                    and history_1.id != history_2.id
                    
            left join identifier( $identifier_table_opportunity_field_history ) as history_3
                on history_2.opportunity_id = history_3.opportunity_id
                    and history_2.created_date = history_3.created_date
                    and history_2.new_value = history_3.old_value
                    and history_2.id != history_3.id
                    and history_1.id != history_3.id
                    
            where history_3.id is not null  ) 
        
as history_third
on history.id = history_third.history_id_1

left join ( select  history_1.id as history_id_1
                    ,history_1.old_value as old_value_1
                    ,history_1.new_value as new_value_1
                    ,history_2.id as history_id_2
                    ,history_2.old_value as old_value_2
                    ,history_2.new_value as new_value_2  
                    ,history_3.id as history_id_3
                    ,history_3.old_value as old_value_3
                    ,history_3.new_value as new_value_3
           
            from    identifier( $identifier_table_opportunity_field_history ) 
                as history_1
            
            left join identifier( $identifier_table_opportunity_field_history ) 
                as history_2
                on history_1.opportunity_id = history_2.opportunity_id
                    and history_1.created_date = history_2.created_date
                    and history_1.new_value = history_2.old_value
                    and history_1.id != history_2.id
                    
            left join identifier( $identifier_table_opportunity_field_history )
                as history_3
                on history_2.opportunity_id = history_3.opportunity_id
                    and history_1.created_date = history_3.created_date
                    and history_2.created_date = history_3.created_date
                    and history_2.new_value = history_3.old_value
                    and history_1.old_value = history_3.new_value
                    and history_2.id != history_3.id
                    and history_1.id != history_3.id
                    
            where history_3.id is not null ) 
        
as history_third_duplicate
on history.id = history_third_duplicate.history_id_1

// WHERE STATEMENTS USED FOR FILTERING SOURCE TABLES
// REMOVES THE DUPLICATES IN THE DATA FOR GETTING THE LAST CHANGE IN THE MONTH

where   history_second_duplicate.history_id_1 is null
    and history_third_duplicate.history_id_1 is null
;
// REFRESHES THE OPPORTUNITY HISTORY PRICE TABLE

create or replace temporary table identifier( $identifier_table_opportunity_history_price )
    as

select *

from (

select distinct opportunity_history.id_opportunity
        ,opportunity_history.date_created
        ,opportunity_history.date_closed
        ,opportunity_history.is_closed
        ,opportunity_history.is_won
        ,opportunity_history.is_deleted
        ,opportunity_history.name_opportunity
          
        ,to_date( opportunity_history.date_changed ) as date_changed
      
        ,case when first_value( opportunity_history.old_value ) 
                over ( partition by opportunity_history.id_opportunity
                                    ,last_day( opportunity_history.date_changed ) 
            order by opportunity_history.date_changed asc ) is null
            then 0
            else first_value( opportunity_history.old_value ) 
                over ( partition by opportunity_history.id_opportunity
                                    ,last_day( opportunity_history.date_changed ) 
            order by opportunity_history.date_changed asc )
            end as value_old

        ,case when last_value( opportunity_history.new_value ) 
                over ( partition by opportunity_history.id_opportunity
                                    ,last_day( opportunity_history.date_changed ) 
            order by opportunity_history.date_changed asc ) is null 
                then 0 
            else last_value( opportunity_history.new_value ) 
                over ( partition by opportunity_history.id_opportunity
                                    ,last_day( opportunity_history.date_changed ) 
            order by opportunity_history.date_changed asc ) 
            end as value_new
 
from    identifier( $identifier_table_opportunity_history )
    as opportunity_history
        
left join   identifier( $identifier_table_opportunity )
    as opportunity
    on opportunity_history.id_opportunity = opportunity.id

// MUST CUSTOMIZE BY EACH COMPANY BASED ON WHAT FIELD IS USED ON THE OPPORUTNITY TABLE TO AGGREGATE ALL THE OPPORTUNITY LINE ITEM TOTAL PRICE VALUES ATTACHED TO THAT OPPORTUNITY  
  
where   opportunity_history.name_field = $variable_price

) as pipeline_price
;
// REFRESHES THE OPPORTUNITY HISTORY DATE TABLE

create or replace temporary table identifier( $identifier_table_opportunity_history_date ) 
    as

select distinct *

from (

select distinct opportunity_history.id_opportunity
        ,opportunity_history.date_created
        ,opportunity_history.date_closed
        ,opportunity_history.is_closed
        ,opportunity_history.is_won
        ,opportunity_history.is_deleted
        ,opportunity_history.name_opportunity
          
        ,to_date( opportunity_history.date_changed ) as date_changed

        ,case when first_value( opportunity_history.old_value ) 
                over ( partition by opportunity_history.id_opportunity
                                    ,last_day( opportunity_history.date_changed ) 
            order by opportunity_history.date_changed asc ) is null
            then null
            else first_value( opportunity_history.old_value ) 
                over ( partition by opportunity_history.id_opportunity
                                    ,last_day( opportunity_history.date_changed ) 
            order by opportunity_history.date_changed asc )
            end as value_old

        ,case when first_value( opportunity_history.new_value ) 
                over ( partition by opportunity_history.id_opportunity
                                    ,last_day( opportunity_history.date_changed ) 
            order by opportunity_history.date_changed asc ) is null 
                then null 
            else first_value( opportunity_history.new_value ) 
                over ( partition by opportunity_history.id_opportunity
                                    ,last_day( opportunity_history.date_changed ) 
            order by opportunity_history.date_changed asc ) 
            end as value_new
 
from     identifier( $identifier_table_opportunity_history )
    as opportunity_history
        
left join    identifier( $identifier_table_opportunity )
    as opportunity
    on opportunity_history.id_opportunity = opportunity.id

// MUST CUSTOMIZE BY EACH COMPANY BASED ON WHAT FIELD IS USED ON THE OPPORUTNITY TABLE FOR CLOSE DATE

where opportunity_history.name_field = $variable_date

) as pipeline_date

where  ( last_day( to_date( pipeline_date.date_changed ) ) 
            = last_day( to_date( pipeline_date.value_old ) ) 
        or last_day( to_date( pipeline_date.date_changed ) ) 
            = last_day( to_date( pipeline_date.value_new ) ) ) 
;
// REFRESHES THE OPPORTUNITY HISTORY WEIGHT/PROBABILITY TABLE

create or replace temporary table identifier( $identifier_table_opportunity_history_weight ) as

select distinct opportunity_history.id_opportunity
        ,opportunity_history.date_created
        ,opportunity_history.date_closed
        ,opportunity_history.is_closed
        ,opportunity_history.is_won
        ,opportunity_history.is_deleted
        ,opportunity_history.name_opportunity
          
        ,to_date( opportunity_history.date_changed ) as date_changed
      
        ,case when first_value( opportunity_history.old_value ) 
                over ( partition by opportunity_history.id_opportunity
                                    ,last_day( opportunity_history.date_changed ) 
            order by opportunity_history.date_changed asc ) is null
            then 100
            else first_value( opportunity_history.old_value ) 
                over ( partition by opportunity_history.id_opportunity
                                    ,last_day( opportunity_history.date_changed ) 
            order by opportunity_history.date_changed asc )
            end *.01 as value_old

        ,case 
            when first_value( opportunity_history.new_value ) 
                over ( partition by opportunity_history.id_opportunity
                                    ,last_day( opportunity_history.date_changed ) 
            order by opportunity_history.date_changed asc ) is null 
                then 100 
            else first_value( opportunity_history.new_value ) 
                over ( partition by opportunity_history.id_opportunity
                                    ,last_day( opportunity_history.date_changed ) 
            order by opportunity_history.date_changed asc ) 
            end *.01 as value_new
 
from    identifier( $identifier_table_opportunity_history )
    as opportunity_history
        
left join   identifier( $identifier_table_opportunity )
    as opportunity
    on opportunity_history.id_opportunity = opportunity.id

// MUST CUSTOMIZE BY EACH COMPANY BASED ON WHAT FIELD IS USED ON THE OPPORUTNITY TABLE FOR PROBABILITY

where opportunity_history.name_field = $variable_probability
;
// REFRESHES THE COMBINED PRICE DATE AND WEIGHT TABLE

create or replace temporary table identifier( $identifier_table_opportunity_pipeline ) as

select distinct opportunity_pipeline.id_opportunity
        ,opportunity_pipeline.id_account
        ,opportunity_pipeline.id_owner
        ,opportunity_pipeline.is_closed
        ,opportunity_pipeline.is_won
        ,opportunity_pipeline.name_opportunity
        ,opportunity_pipeline.date_created
        ,opportunity_pipeline.date_closed
        ,opportunity_pipeline.date_changed
        ,opportunity_pipeline.name_type_start
        ,opportunity_pipeline.name_type_end
        ,opportunity_pipeline.name_sales_rep
        ,opportunity_pipeline.value_usd 
        ,opportunity_pipeline.value_date_closed
        ,opportunity_pipeline.value_weight
        ,opportunity_pipeline.name_stage
        ,opportunity_pipeline.value_usd_weighted
        
        ,case when date_trunc('YEAR', opportunity_pipeline.date_changed ) = date_trunc('YEAR', opportunity_pipeline.value_date_closed )
                then 'TRUE'
            else 'FALSE'
            end as is_in_year
        
        ,case when date_trunc('QUARTER', opportunity_pipeline.date_changed ) = date_trunc('QUARTER', opportunity_pipeline.value_date_closed )
                then 'TRUE'
            else 'FALSE'
            end as is_in_quarter
        
        ,case when date_trunc('MONTH', opportunity_pipeline.date_changed ) = date_trunc('MONTH', opportunity_pipeline.value_date_closed )
                then 'TRUE'
            else 'FALSE'
            end as is_in_month
        
        ,datediff(day, opportunity_pipeline.date_changed, to_date ( opportunity_pipeline.value_date_closed ) ) as value_days_to_close

        ,lag( opportunity_pipeline.value_usd )
                over ( partition by opportunity_pipeline.id_opportunity 
                        order by opportunity_pipeline.date_changed ) as value_usd_previous

        ,lag( opportunity_pipeline.value_weight )
                over ( partition by opportunity_pipeline.id_opportunity  
                        order by opportunity_pipeline.date_changed ) as value_weight_previous
                        
        ,lag( opportunity_pipeline.value_usd_weighted )
                over ( partition by opportunity_pipeline.id_opportunity  
                        order by opportunity_pipeline.date_changed ) as value_usd_weighted_previous

        ,first_value( opportunity_pipeline.value_usd )
                over ( partition by opportunity_pipeline.id_opportunity ||' | '|| year( opportunity_pipeline.date_changed ) 
                        order by opportunity_pipeline.date_changed ) as value_usd_year

        ,first_value( opportunity_pipeline.value_usd_weighted )
                over ( partition by opportunity_pipeline.id_opportunity ||' | '|| year( opportunity_pipeline.date_changed ) 
                        order by opportunity_pipeline.date_changed ) as value_usd_weighted_year

        ,first_value( opportunity_pipeline.value_usd )
                over ( partition by opportunity_pipeline.id_opportunity ||' | '|| year( opportunity_pipeline.date_changed ) ||' | '|| quarter( opportunity_pipeline.date_changed ) 
                        order by opportunity_pipeline.date_changed ) as value_usd_quarter

        ,first_value( opportunity_pipeline.value_usd_weighted )
                over ( partition by opportunity_pipeline.id_opportunity ||' | '|| year( opportunity_pipeline.date_changed )  ||' | '|| quarter( opportunity_pipeline.date_changed ) 
                        order by opportunity_pipeline.date_changed ) as value_usd_weighted_quarter

        ,value_usd - value_usd_previous as value_usd_change
        ,value_weight - value_weight_previous as value_weight_change
        ,value_usd_weighted - value_usd_weighted_previous as value_usd_weighted_change

        ,case when value_usd_change > 0
                then 'Increase'
            when value_usd_change < 0
                then 'Decrease' 
            else null
            end as name_type_usd

        ,case when value_weight_change > 0
                then 'Increase'
            when value_weight_change < 0
                then 'Decrease' 
            else null
            end as name_type_weight
            
        ,case when value_usd_weighted_change > 0
                then 'Increase'
            when value_usd_weighted_change < 0
                then 'Decrease' 
            else null
            end as name_type_usd_weighted

from (

select  distinct opportunity.id                 as id_opportunity
        ,opportunity.account_id                 as id_account
        ,opportunity.owner_id                   as id_owner
        ,opportunity.is_closed                  as is_closed
        ,opportunity.is_won                     as is_won
        ,opportunity.name                       as name_opportunity
        ,to_date( opportunity.created_date )    as date_created
        ,to_date( opportunity.close_date )      as date_closed
        ,to_date( calendar.month )              as date_changed

        ,case when last_day( 
                ( case when last_day( opportunity.created_date ) > last_day( opportunity.close_date ) 
                        then last_day( opportunity.close_date )
                        else last_day( opportunity.created_date )
                        end ) ) = last_day( calendar.month ) 
                then 'New'
            else 'Beginning' 
            end as name_type_start

        ,case when last_day( opportunity.close_date ) = last_day( calendar.month )
                and opportunity.is_closed != 'TRUE'
                then 'Open'
            when last_day( opportunity.close_date ) = last_day( calendar.month )
                and opportunity.is_closed = 'TRUE'
                and opportunity.is_won = 'TRUE'
                then 'Won'
            when last_day( opportunity.close_date ) = last_day( calendar.month )
                and opportunity.is_closed = 'TRUE'
                and opportunity.is_won != 'TRUE'
                then 'Lost'
            else 'Ending' 
            end as name_type_end
            
//        ,opportunity.opp_type_c                 as name_bookings_type_raw
//        ,opportunity.owner_team_closed_c        as name_team_closed_raw
//        ,opportunity.owner_team_created_c       as name_team_created_raw
        ,owner.last_name|| ', '||owner.first_name   as name_sales_rep
        
        ,case when last_value( opportunity_history_price_rolling.value_new )
                    over ( partition by opportunity.id, calendar.month 
                    order by opportunity_history_price_rolling.date_changed ) is null
                and first_value( opportunity_history_price_rolling.value_old )
                    over ( partition by opportunity.id
                    order by opportunity_history_price_rolling.date_changed ) is null
                and identifier( $variable_opportunity_price ) is null
                then 0
            when last_value( opportunity_history_price_rolling.value_new )
                    over ( partition by opportunity.id, calendar.month 
                    order by opportunity_history_price_rolling.date_changed ) is null
                and first_value( opportunity_history_price_rolling.value_old )
                    over ( partition by opportunity.id
                    order by opportunity_history_price_rolling.date_changed ) is null
                then identifier( $variable_opportunity_price )
            when last_value( opportunity_history_price_rolling.value_new )
                    over ( partition by opportunity.id, calendar.month 
                    order by opportunity_history_price_rolling.date_changed ) is null
                then first_value( opportunity_history_price_rolling.value_old )
                    over ( partition by opportunity.id
                    order by opportunity_history_price_rolling.date_changed )
            else last_value( opportunity_history_price_rolling.value_new )
                    over ( partition by opportunity.id, calendar.month 
                    order by opportunity_history_price_rolling.date_changed )
            end as value_usd 

        ,case when name_type_end = 'Lost'
                then to_date( opportunity.close_date )
            when name_type_end = 'Won'
                then to_date( opportunity.close_date )
            when last_value( opportunity_history_date_rolling.value_new )
                    over ( partition by opportunity.id, calendar.month 
                    order by opportunity_history_date_rolling.date_changed ) is null
                and first_value( opportunity_history_date_rolling.value_old )
                    over ( partition by opportunity.id
                    order by opportunity_history_date_rolling.date_changed ) is null
                then to_date( opportunity.close_date )
            when last_value( opportunity_history_date_rolling.value_new )
                    over ( partition by opportunity.id, calendar.month 
                    order by opportunity_history_date_rolling.date_changed ) is null
                then first_value( opportunity_history_date_rolling.value_old )
                    over ( partition by opportunity.id
                    order by opportunity_history_date_rolling.date_changed )
            else last_value( opportunity_history_date_rolling.value_new )
                    over ( partition by opportunity.id, calendar.month 
                    order by opportunity_history_date_rolling.date_changed )
            end as value_date_closed 

        ,case when name_type_end = 'Lost'
                then 1
            when name_type_end = 'Won'
                then 1
            when last_value( opportunity_history_weight_rolling.value_new )
                    over ( partition by opportunity.id, calendar.month 
                    order by opportunity_history_weight_rolling.date_changed ) is null
                and first_value( opportunity_history_weight_rolling.value_old )
                    over ( partition by opportunity.id
                    order by opportunity_history_weight_rolling.date_changed ) is null
                then opportunity.probability * .01
            when last_value( opportunity_history_weight_rolling.value_new )
                    over ( partition by opportunity.id, calendar.month 
                    order by opportunity_history_weight_rolling.date_changed ) is null
                then first_value( opportunity_history_weight_rolling.value_old )
                    over ( partition by opportunity.id
                    order by opportunity_history_weight_rolling.date_changed )
            else last_value( opportunity_history_weight_rolling.value_new )
                    over ( partition by opportunity.id, calendar.month 
                    order by opportunity_history_weight_rolling.date_changed )
            end as value_weight

        ,case when value_weight <= .5
                then 'Stage 1'
            when value_weight <= .8
                then 'Stage 2'
            when value_weight <= 1.1
                then 'Stage 3'
            else 'Stage 0'
            end as name_stage

        ,value_usd * value_weight               as value_usd_weighted
        
from ( select   row_number() over (order by null) as id
                ,add_months('2017-01-01'::date, + id - 1 ) as month
        from table(generator(rowcount => 10000) ) ) as calendar
        
left join   identifier( $identifier_table_opportunity )
    as opportunity
  
left join   identifier( $identifier_table_owner )                    
    as owner                
    on opportunity.owner_id = owner.id

left join   identifier( $identifier_table_opportunity_history_price )
    as opportunity_history_price
    on opportunity.id = opportunity_history_price.id_opportunity
    and last_day( calendar.month ) = last_day( opportunity_history_price.date_changed )

left join   identifier( $identifier_table_opportunity_history_price )
    as opportunity_history_price_rolling
    on opportunity.id = opportunity_history_price_rolling.id_opportunity
    and last_day( calendar.month ) >= last_day( opportunity_history_price_rolling.date_changed )

left join   identifier( $identifier_table_opportunity_history_weight )
    as opportunity_history_weight
    on opportunity.id = opportunity_history_weight.id_opportunity
    and last_day( calendar.month ) = last_day( opportunity_history_weight.date_changed )

left join   identifier( $identifier_table_opportunity_history_weight )
    as opportunity_history_weight_rolling
    on opportunity.id = opportunity_history_weight_rolling.id_opportunity
    and last_day( calendar.month ) >= last_day( opportunity_history_weight_rolling.date_changed )

left join   identifier( $identifier_table_opportunity_history_date )
    as opportunity_history_date
    on opportunity.id = opportunity_history_date.id_opportunity
    and last_day( calendar.month ) = last_day( opportunity_history_date.date_changed )

left join   identifier( $identifier_table_opportunity_history_date )
    as opportunity_history_date_rolling
    on opportunity.id = opportunity_history_date_rolling.id_opportunity
    and last_day( calendar.month ) >= last_day( opportunity_history_date_rolling.date_changed )

where   last_day( calendar.month ) <= last_day( dateadd( month, 60, current_date() ) )
    and last_day( calendar.month ) > '2018-12-28'
    and year( opportunity.close_date ) > 2017
    and last_day( calendar.month ) <= last_day( opportunity.close_date )
    and last_day( calendar.month ) >= ( case when last_day( opportunity.created_date ) > last_day( opportunity.close_date ) 
                                        then last_day( opportunity.close_date )
                                    else last_day( opportunity.created_date )
                                    end )

// FILTERS COMPANY SPECIFIC

    and opportunity.is_deleted != 'TRUE'
    and ( owner.name = 'Edgar Pointdujour' 
        or owner.name = 'Ian Anderson'
        or owner.name = 'Kelsey Meyer'
        or owner.name = 'Thomas Buchanan'
        or owner.name = 'Taylor Johnson' 
        or owner.name = 'Monica Pedroza' )
 

) as opportunity_pipeline     

where last_day( opportunity_pipeline.date_changed ) < last_day( current_date() )
;
// BREAKS OUT THE COMBINED OPPORTUNITY DATE PRICE AND WEIGHT TABLE FOR POWER BI TO INGEST
// AFTER RUNNING THE TABLE MUST BE ADDED BACK TO THE TABLE SHARE

select  distinct opportunity_pipeline.id_opportunity
        ,opportunity_pipeline.id_account
        ,opportunity_pipeline.id_owner
        ,opportunity_pipeline.name_opportunity
        ,opportunity_pipeline.date_changed
        ,opportunity_pipeline.value_usd
        ,opportunity_pipeline.value_weight      
        ,opportunity_pipeline.value_usd_weighted
        ,opportunity_pipeline.value_date_closed
        ,opportunity_pipeline.value_days_to_close
        ,opportunity_pipeline.is_in_year
        ,opportunity_pipeline.is_in_quarter
        ,opportunity_pipeline.is_in_month
        ,opportunity_pipeline.name_type_start       as name_type
        ,1                                          as sort_type

from    identifier( $identifier_table_opportunity_pipeline )
    as opportunity_pipeline

where   opportunity_pipeline.name_type_start = 'New'

union all

select  distinct opportunity_pipeline.id_opportunity
        ,opportunity_pipeline.id_account
        ,opportunity_pipeline.id_owner
        ,opportunity_pipeline.name_opportunity
        ,opportunity_pipeline.date_changed
        ,opportunity_pipeline.value_usd * -1    as value_usd
        ,1                              as value_weight
        ,opportunity_pipeline.value_usd * value_weight * -1 as value_usd_weighted
        ,opportunity_pipeline.value_date_closed
        ,opportunity_pipeline.value_days_to_close
        ,opportunity_pipeline.is_in_year
        ,opportunity_pipeline.is_in_quarter
        ,opportunity_pipeline.is_in_month
        ,'Won'                          as name_type
        ,6                              as sort_type

from    identifier( $identifier_table_opportunity_pipeline ) 
    as opportunity_pipeline

where  opportunity_pipeline.name_type_end = 'Won'

union all

select  distinct opportunity_pipeline.id_opportunity
        ,opportunity_pipeline.id_account
        ,opportunity_pipeline.id_owner
        ,opportunity_pipeline.name_opportunity
        ,opportunity_pipeline.date_changed
        ,opportunity_pipeline.value_usd * -1    as value_usd 
        ,1                             as value_weight 
        ,opportunity_pipeline.value_usd * value_weight * -1    as value_usd_weighted
        ,opportunity_pipeline.value_date_closed
        ,opportunity_pipeline.value_days_to_close
        ,opportunity_pipeline.is_in_year
        ,opportunity_pipeline.is_in_quarter
        ,opportunity_pipeline.is_in_month
        ,'Lost'                         as name_type
        ,7                              as sort_type

from    identifier( $identifier_table_opportunity_pipeline ) 
    as opportunity_pipeline

where   opportunity_pipeline.name_type_end = 'Lost'

union all

select  distinct opportunity_pipeline.id_opportunity
        ,opportunity_pipeline.id_account
        ,opportunity_pipeline.id_owner
        ,opportunity_pipeline.name_opportunity
        ,dateadd( month, 1, opportunity_pipeline.date_changed ) as date_changed
        ,opportunity_pipeline.value_usd as value_usd 
        ,opportunity_pipeline.value_weight    as weight 
        ,value_usd * weight             as value_usd_weighted
        ,opportunity_pipeline.value_date_closed
        ,opportunity_pipeline.value_days_to_close
        ,opportunity_pipeline.is_in_year
        ,opportunity_pipeline.is_in_quarter
        ,opportunity_pipeline.is_in_month
        ,'Beginning'                    as name_type
        ,0                              as sort_type

from    identifier( $identifier_table_opportunity_pipeline ) 
    as opportunity_pipeline

where   opportunity_pipeline.name_type_end = 'Ending'

union all

select  distinct opportunity_pipeline.id_opportunity
        ,opportunity_pipeline.id_account
        ,opportunity_pipeline.id_owner
        ,opportunity_pipeline.name_opportunity
        ,opportunity_pipeline.date_changed
        ,opportunity_pipeline.value_usd_change  as value_usd 
        ,opportunity_pipeline.value_weight      as weight   
        ,0                                      as value_usd_weighted
        ,opportunity_pipeline.value_date_closed
        ,opportunity_pipeline.value_days_to_close
        ,opportunity_pipeline.is_in_year
        ,opportunity_pipeline.is_in_quarter
        ,opportunity_pipeline.is_in_month
        ,'Increase'                 as name_type
        ,2                          as sort_type

from    identifier( $identifier_table_opportunity_pipeline ) 
    as opportunity_pipeline

where   opportunity_pipeline.name_type_usd = 'Increase'

union all

select  distinct opportunity_pipeline.id_opportunity
        ,opportunity_pipeline.id_account
        ,opportunity_pipeline.id_owner
        ,opportunity_pipeline.name_opportunity
        ,opportunity_pipeline.date_changed
        ,opportunity_pipeline.value_usd_change  as value_usd 
        ,opportunity_pipeline.value_weight      as weight   
        ,0                                      as value_usd_weighted
        ,opportunity_pipeline.value_date_closed
        ,opportunity_pipeline.value_days_to_close
        ,opportunity_pipeline.is_in_year
        ,opportunity_pipeline.is_in_quarter
        ,opportunity_pipeline.is_in_month
        ,'Decrease'                             as name_type
        ,4                                      as sort_type

from    identifier( $identifier_table_opportunity_pipeline ) 
    as opportunity_pipeline

where   opportunity_pipeline.name_type_usd = 'Decrease'

union all

select  distinct opportunity_pipeline.id_opportunity
        ,opportunity_pipeline.id_account
        ,opportunity_pipeline.id_owner
        ,opportunity_pipeline.name_opportunity
        ,opportunity_pipeline.date_changed
        ,0                                  as value_usd 
        ,opportunity_pipeline.value_weight  as weight   
        ,opportunity_pipeline.value_usd_weighted_change
        ,opportunity_pipeline.value_date_closed
        ,opportunity_pipeline.value_days_to_close
        ,opportunity_pipeline.is_in_year
        ,opportunity_pipeline.is_in_quarter
        ,opportunity_pipeline.is_in_month
        ,'Increase'                         as name_type
        ,2                                  as sort_type

from    identifier( $identifier_table_opportunity_pipeline ) 
    as opportunity_pipeline
    
where   opportunity_pipeline.name_type_usd_weighted = 'Increase'

union all

select  distinct opportunity_pipeline.id_opportunity
        ,opportunity_pipeline.id_account
        ,opportunity_pipeline.id_owner
        ,opportunity_pipeline.name_opportunity
        ,opportunity_pipeline.date_changed
        ,0                                      as value_usd 
        ,opportunity_pipeline.value_weight      as weight   
        ,opportunity_pipeline.value_usd_weighted_change
        ,opportunity_pipeline.value_date_closed
        ,opportunity_pipeline.value_days_to_close
        ,opportunity_pipeline.is_in_year
        ,opportunity_pipeline.is_in_quarter
        ,opportunity_pipeline.is_in_month
        ,'Decrease'                             as name_type
        ,4                                      as sort_type

from    identifier( $identifier_table_opportunity_pipeline )
    as opportunity_pipeline

where   opportunity_pipeline.name_type_usd_weighted = 'Decrease'
;
